using System;
using System.Collections.Generic;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading;
using System.Threading.Tasks;
using Windows.Devices.HumanInterfaceDevice;
using BlackFox.Binary;

namespace BlackFox.UsbHid.Uwp
{
    public class UwpHidDevice : IHidDevice
    {
        readonly HidDevice device;

        public UwpHidDevice(HidDevice device)
        {
            if (device == null)
            {
                throw new ArgumentNullException(nameof(device));
            }

            this.device = device;
            device.InputReportReceived += DeviceOnInputReportReceived;
        }

        readonly object inputReportLock = new object();

        readonly Queue<Windows.Devices.HumanInterfaceDevice.HidInputReport> inputReportQueue
            = new Queue<Windows.Devices.HumanInterfaceDevice.HidInputReport>();

        TaskCompletionSource<Windows.Devices.HumanInterfaceDevice.HidInputReport> inputReportSource;

        void DeviceOnInputReportReceived(HidDevice sender, HidInputReportReceivedEventArgs args)
        {
            lock (inputReportLock)
            {
                if (inputReportSource != null)
                {
                    inputReportSource.TrySetResult(args.Report);
                }
                else
                {
                    inputReportQueue.Enqueue(args.Report);
                }
            }
        }

        public void Dispose()
        {
            device.Dispose();
        }

        public IHidDeviceInformation Information
        {
            get { throw new NotImplementedException(); }
        }

        public HidOutputReport CreateOutputReport(byte id = 0)
        {
            return device.CreateOutputReport(id);
        }

        IHidOutputReport IHidDevice.CreateOutputReport(byte id) => new UwpOutputReport(CreateOutputReport(id));

        public async Task<int> SendOutputReportAsync(HidOutputReport report, CancellationToken cancellationToken = new CancellationToken())
        {
            var result = await device.SendOutputReportAsync(report).AsTask(cancellationToken);
            return (int)result;
        }

        Task<int> IHidDevice.SendOutputReportAsync(IHidOutputReport report, CancellationToken cancellationToken)
        {
            if (report == null)
            {
                throw new ArgumentNullException(nameof(report));
            }
            var uwpReport = report as UwpOutputReport;
            if (uwpReport == null)
            {
                throw new ArgumentException("Expected a report generated by this device", nameof(report));
            }

            return SendOutputReportAsync(uwpReport.GetFilledReport(), cancellationToken);
        }

        public async Task<HidInputReport> GetInputReportAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            lock (inputReportLock)
            {
                if (inputReportSource != null)
                {
                    throw new ArgumentException("Can't have more than one GetInputReportAsync running");
                }

                if (inputReportQueue.Count > 0)
                {
                    return WrapInputReport(inputReportQueue.Dequeue());
                }

                inputReportSource = new TaskCompletionSource<Windows.Devices.HumanInterfaceDevice.HidInputReport>();
            }

            try
            {
                return WrapInputReport(await inputReportSource.Task);
            }
            finally
            {
                lock (inputReportLock)
                {
                    inputReportSource = null;
                }
            }
            /*
            var result = await device.GetInputReportAsync().AsTask(cancellationToken);
            var buffer = result.Data.ToArray().Segment();
            return new HidInputReport((byte)result.Id, buffer);*/
        }

        static HidInputReport WrapInputReport(Windows.Devices.HumanInterfaceDevice.HidInputReport report)
        {
            var buffer = report.Data.ToArray().Segment();
            return new HidInputReport(buffer);
        }
    }
}