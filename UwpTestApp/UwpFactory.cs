using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Windows.Devices.Enumeration;
using Windows.Devices.HumanInterfaceDevice;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.UI.Core;
using BlackFox.Binary;
using BlackFox.UsbHid;
using JetBrains.Annotations;
using HidInputReport = BlackFox.UsbHid.HidInputReport;


namespace UwpTestApp
{
    class UwpOutputReport : IHidOutputReport
    {
        readonly HidOutputReport report;
        public byte Id => (byte)report.Id;
        public ArraySegment<byte> Data { get; }

        public UwpOutputReport(HidOutputReport report)
        {
            this.report = report;
            Data = new ArraySegment<byte>(new byte[report.Data.Capacity-1]);
        }

        public HidOutputReport GetFilledReport()
        {
            var dataWriter = new DataWriter();
            dataWriter.WriteByte(Id);
            dataWriter.WriteBytes(Data.Array);
            report.Data = dataWriter.DetachBuffer();

            return report;
        }
    }

    class UwpDevice : IHidDevice
    {
        readonly HidDevice device;

        public UwpDevice(HidDevice device)
        {
            if (device == null)
            {
                throw new ArgumentNullException(nameof(device));
            }

            this.device = device;
            device.InputReportReceived += DeviceOnInputReportReceived;
        }

        object inputReportLock = new object();
        Queue<Windows.Devices.HumanInterfaceDevice.HidInputReport> inputReportQueue
            = new Queue<Windows.Devices.HumanInterfaceDevice.HidInputReport>();
        TaskCompletionSource<Windows.Devices.HumanInterfaceDevice.HidInputReport> inputReportSource;

        void DeviceOnInputReportReceived(HidDevice sender, HidInputReportReceivedEventArgs args)
        {
            lock (inputReportLock)
            {
                if (inputReportSource != null)
                {
                    inputReportSource.SetResult(args.Report);
                }
                else
                {
                    inputReportQueue.Enqueue(args.Report);
                }
            }
        }

        public void Dispose()
        {
            device.Dispose();
        }

        public IHidDeviceInformation Information
        {
            get { throw new NotImplementedException(); }
        }

        public HidOutputReport CreateOutputReport(byte id = 0)
        {
            return device.CreateOutputReport(id);
        }

        IHidOutputReport IHidDevice.CreateOutputReport(byte id) => new UwpOutputReport(CreateOutputReport(id));

        public async Task<int> SendOutputReportAsync(HidOutputReport report, CancellationToken cancellationToken = new CancellationToken())
        {
            var result = await device.SendOutputReportAsync(report).AsTask(cancellationToken);
            return (int)result;
        }

        Task<int> IHidDevice.SendOutputReportAsync(IHidOutputReport report, CancellationToken cancellationToken)
        {
            if (report == null)
            {
                throw new ArgumentNullException(nameof(report));
            }
            var uwpReport = report as UwpOutputReport;
            if (uwpReport == null)
            {
                throw new ArgumentException("Expected a report generated by this device", nameof(report));
            }

            return SendOutputReportAsync(uwpReport.GetFilledReport(), cancellationToken);
        }

        public async Task<HidInputReport> GetInputReportAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            lock (inputReportLock)
            {
                if (inputReportSource != null)
                {
                    throw new ArgumentException("Can't have more than one GetInputReportAsync running");
                }

                if (inputReportQueue.Count > 0)
                {
                    return WrapInputReport(inputReportQueue.Dequeue());
                }

                inputReportSource = new TaskCompletionSource<Windows.Devices.HumanInterfaceDevice.HidInputReport>();
            }

            try
            {
                return WrapInputReport(await inputReportSource.Task);
            }
            finally
            {
                lock (inputReportLock)
                {
                    inputReportSource = null;
                }
            }
            /*
            var result = await device.GetInputReportAsync().AsTask(cancellationToken);
            var buffer = result.Data.ToArray().Segment();
            return new HidInputReport((byte)result.Id, buffer);*/
        }

        static HidInputReport WrapInputReport(Windows.Devices.HumanInterfaceDevice.HidInputReport report)
        {
            var buffer = report.Data.ToArray().Segment();
            return new HidInputReport(buffer);
        }
    }

    static class UwpDevicePropertyNames
    {
        public const string UsagePage = "System.DeviceInterface.Hid.UsagePage";
        public const string UsageId = "System.DeviceInterface.Hid.UsageId";
        public const string VendorId = "System.DeviceInterface.Hid.VendorId";
        public const string ProductId = "System.DeviceInterface.Hid.ProductId";

    }

    class UwpFactory : IHidDeviceFactory
    {
        readonly CoreDispatcher uiDispatcher;

        public UwpFactory(CoreDispatcher uiDispatcher)
        {
            this.uiDispatcher = uiDispatcher;
        }

        static FileAccessMode ConvertAccessMode(HidDeviceAccessMode mode)
        {
            switch (mode)
            {
                case HidDeviceAccessMode.Read:
                    return FileAccessMode.Read;

                case HidDeviceAccessMode.Write:
                    return FileAccessMode.ReadWrite;

                case HidDeviceAccessMode.ReadWrite:
                    return FileAccessMode.ReadWrite;

                default:
                    throw new ArgumentOutOfRangeException(nameof(mode), mode, "Unknown mode");
            }
        }

        public async Task<IHidDevice> FromIdAsync(string deviceId, HidDeviceAccessMode accessMode,
            CancellationToken cancellationToken = new CancellationToken())
        {
            var uwpAccessMode = ConvertAccessMode(accessMode);

            HidDevice device = null;
            await uiDispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                device = HidDevice.FromIdAsync(deviceId, uwpAccessMode).AsTask(cancellationToken).Result;
            });

            if (device == null)
            {
                throw new InvalidOperationException("Can't create device");
            }

            return new UwpDevice(device);
        }

        const string EnabledUsbHidSelector =
            @"System.Devices.InterfaceClassGuid:=""{4D1E55B2-F16F-11CF-88CB-001111000030}"""
            + @" AND System.Devices.InterfaceEnabled:=System.StructuredQueryType.Boolean#True";

        static readonly string[] wantedProperties =
            {
                UwpDevicePropertyNames.VendorId,
                UwpDevicePropertyNames.ProductId,
                UwpDevicePropertyNames.UsagePage,
                UwpDevicePropertyNames.UsageId
            };

        public async Task<ICollection<IHidDeviceInformation>> FindAllAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            var raw = await DeviceInformation.FindAllAsync(EnabledUsbHidSelector, wantedProperties,
                DeviceInformationKind.DeviceInterface);

            return raw.Select(di => (IHidDeviceInformation)new UwpDeviceInformation(this, di)).ToList();
        }
    }

    class UwpDeviceInformation : IHidDeviceInformation
    {
        readonly UwpFactory factory;
        readonly DeviceInformation deviceInformation;
        public string Id => deviceInformation.Id;
        public ushort ProductId => UInt16Property(UwpDevicePropertyNames.ProductId);
        public ushort VendorId => UInt16Property(UwpDevicePropertyNames.VendorId);
        public ushort Version => 0;
        public ushort UsageId => UInt16Property(UwpDevicePropertyNames.UsageId);
        public ushort UsagePage => UInt16Property(UwpDevicePropertyNames.UsagePage);
        public string Manufacturer => "";
        public string Product => deviceInformation.Name;
        public string SerialNumber => "";

        public Task<IHidDevice> OpenDeviceAsync(HidDeviceAccessMode accessMode = HidDeviceAccessMode.ReadWrite,
            CancellationToken cancellationToken = new CancellationToken())
        {
            return factory.FromIdAsync(Id, accessMode, cancellationToken);
        }

        public UwpDeviceInformation([NotNull] UwpFactory factory, [NotNull] DeviceInformation deviceInformation)
        {
            if (factory == null)
            {
                throw new ArgumentNullException(nameof(factory));
            }
            if (deviceInformation == null)
            {
                throw new ArgumentNullException(nameof(deviceInformation));
            }

            this.factory = factory;
            this.deviceInformation = deviceInformation;
        }

        string StringProperty(string name)
        {
            object result;
            deviceInformation.Properties.TryGetValue(name, out result);
            return (string)result ?? "";
        }

        ushort UInt16Property(string name)
        {
            object result;
            deviceInformation.Properties.TryGetValue(name, out result);
            return (ushort)result;
        }
    }
}
